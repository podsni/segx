import fs from "node:fs/promises";
import path from "node:path";
import { fileURLToPath } from "node:url";

const projectRoot = path.resolve(path.dirname(fileURLToPath(import.meta.url)), "..");
const scriptRoot = path.join(projectRoot, "script");
const outputDir = path.join(projectRoot, "src", "generated");
const outputFile = path.join(outputDir, "embedded-scripts.ts");

const build = async (): Promise<void> => {
  const records: { path: string; content: string }[] = [];

  const walk = async (currentDir: string, prefix = ""): Promise<void> => {
    const entries = await fs.readdir(currentDir, { withFileTypes: true });

    await Promise.all(
      entries.map(async (entry) => {
        const relativePath = path.posix.join(prefix, entry.name);
        const absolutePath = path.join(currentDir, entry.name);

        if (entry.isDirectory()) {
          await walk(absolutePath, relativePath);
          return;
        }

        if (!entry.isFile()) {
          return;
        }

        const content = await fs.readFile(absolutePath, "utf8");
        records.push({
          path: relativePath,
          content,
        });
      })
    );
  };

  await walk(scriptRoot);

  await fs.mkdir(outputDir, { recursive: true });

  const header = `// Auto-generated by tools/generate-embedded-scripts.ts. Do not edit manually.\n`;
  const body = `export const embeddedScripts: { path: string; content: string }[] = ${JSON.stringify(records, null, 2)};\n`;

  await fs.writeFile(outputFile, header + body, "utf8");
};

build().catch((error) => {
  console.error("Failed to generate embedded scripts:", error);
  process.exit(1);
});
